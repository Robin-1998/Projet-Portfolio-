"""
Ce module impl√©mente le parent Repository pour g√©rer la persistance des donn√©es
avec SQLAlchemy.

Il contient :
    - Repository : classe abstraite d√©finissant l‚Äôinterface g√©n√©rique pour les op√©rations CRUD.
    - SQLAlchemyRepository : impl√©mentation concr√®te utilisant SQLAlchemy comme moteur ORM.

L‚Äôobjectif est de d√©coupler la logique m√©tier de la couche de persistance,
afin de rendre le code plus testable, maintenable et √©volutif.
"""
from abc import ABC, abstractmethod
from backend.app import db

# ==========================================================
# üîπ Classe abstraite Repository
# ==========================================================
class Repository(ABC):
    """
    Interface abstraite d√©finissant les op√©rations CRUD de base.

    Cette classe doit √™tre h√©rit√©e par des impl√©mentations concr√®tes
    """
    @abstractmethod
    def add(self, obj):
        """Ajoute un objet √† la base de donn√©es"""
        pass

    @abstractmethod
    def get(self, obj_id):
        """ R√©cup√®re un objet par son ID """
        pass

    @abstractmethod
    def get_all(self):
        """ recup√®re tous les objets"""
        pass

    @abstractmethod
    def update(self, obj_id, data):
        """ Met √† jour un objet existant"""
        pass

    @abstractmethod
    def delete(self, obj_id):
        """ Supprime un objet de la db par son identifiant (id)"""
        pass

    @abstractmethod
    def get_by_attribute(self, attr_name, attr_value):
        """ R√©cup√®re un objet par un attribut sp√©cifique """
        pass

# ==========================================================
# üîπ Impl√©mentation SQLAlchemy
# ==========================================================
class SQLAlchemyRepository(Repository):
    """
    Impl√©mentation concr√®te du repository bas√©e sur SQLAlchemy.

    Fournit les op√©rations CRUD g√©n√©riques valables pour n‚Äôimporte quel mod√®le SQLAlchemy.
    Les classes sp√©cialis√©es (ex. : UserRepository, ReviewRepository, etc.)
    h√©ritent de cette classe et d√©finissent leur mod√®le cible.
    """
    def __init__(self, model):
        self.model = model

    #------------CREATION------------------

    def add(self, obj):
        """
        Ajoute un objet √† la base de donn√©es et le commit.

        Code Erreur:
            Exception: Si une erreur survient lors du commit.
        """
        try:
            db.session.add(obj)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            raise

    #------------READ------------------

    def get(self, obj_id):
        """
        R√©cup√®re un objet par son identifiant
        """
        return db.session.get(self.model, obj_id)

    def get_all(self):
        """
        R√©cup√®re tous les objets du mod√®le.
        """
        return self.model.query.all()
    
    def get_by_attribute(self, attr_name, attr_value):
        """
        R√©cup√®re un objet selon la valeur d'un attribut donn√©
        """
        return self.model.query.filter(getattr(self.model, attr_name) == attr_value).first()

    #------------UPDATE------------------

    def update(self, obj_id, data):
        """
        Met √† jour un objet existant avec les valeurs fournies.
        """
        try:
            obj = self.get(obj_id)
            if obj:
                for key, value in data.items():
                    # V√©rifie que l'attribut existe sur le mod√®le
                    if hasattr(obj, key):
                        setattr(obj, key, value)
                db.session.commit()
                return obj
            return None
        except Exception as e:
            db.session.rollback()
            raise

    def delete(self, obj_id):
        """
        Supprime un objet de la base de donn√©es.
        Code Erreur:
            Exception: Si la suppression √©choue
        """
        try:
            obj = self.get(obj_id)
            if obj:
                db.session.delete(obj)
                db.session.commit()
                return True
            return False
        except Exception as e:
            db.session.rollback()
            raise RuntimeError(f"Erreur lors de la suppression de {self.model.__name__}: {e}")

